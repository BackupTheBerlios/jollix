#!/usr/bin/perl

#
#    transitmount: easy access to transitting volumes by non-root users
#    Copyright (C) 2001  Stéphane Gourichon
#    e-mail: stephane.gourichon@lip6.fr, gouri@amphi-gouri.org, gouri@free.fr
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#

#    Modified by Jochen Spang <knochestolle@web.de> and
#    Oliver Schwinn <patteh@web.de> for jollix <www.jollix.de>
#    location in cloop: /sbin/transitmount


# ====================== CONFIGURATION SECTION ======================

# Here you can customize to your needs the mount options for different
# filesystems

%fstype_to_options=(
# You may want to put "noexec" on every fs type, especially if "." is
# in root's path (is shouldn't be).
# Even unix-style filesystems will be mounted "nosuid,nodev" because they
# are not trusted by default.
		    "ext2" => [ '-o', 'ro,nodev,nosuid'],
		    "ext3" => [ '-o', 'nodev,nosuid'],
		    "minix" => [ '-o', 'nodev,nosuid'],
                    "x86" => [ '-o', '-ro,uid=user'],

# Furthermore, other filesystems are mounted "noexec"
		    "iso9660" => [ '-o', 'nodev,nosuid,noexec'],

# Notice that most pseudo-disk (flash cards, digital camera, ...)
# contain (or behave like) FAT filesystems. This could guide your
# choice of uid/gid/umask options.
		    "fat" => [ '-o', 'uid=1149,umask=007,noexec']
		    );


undef $verbose;
undef $debug;
undef $debug2;

# Activate verbose/debug messages ?
#$verbose=2;
#$debug=1;
#$debug2=1;

#let command line override those settings
if (($_=shift) gt 0) {
    $verbose=$_;
    print "Verbose level set to $verbose from command line (useful values are 0, 1 and 2).\n";
}


# You shouldn't have to change this, but if you want...
$transitmount_root="/mnt/transit/";
$tempmountpoint="/mnt/temp_mount_point_for_transitmount";
$softlabel_filename="volname";
$softlabel_fullname=$tempmountpoint."/".$softlabel_filename;

# Read files in current dir, not in /proc or in /etc (for debug)
# This is to reproduce behavior reported by users.
# It's not actually a full simulation, since we'll peek in the current
# (real) /dev tree.
$simulate=0;

# =========== END OF CONFIGURATION SECTION ===========

$version="0.5";

printf "Transitmount v".$version." by Stéphane Gourichon <stephane.gourichon\@lip6.fr>\n";

# Some commodities routines

sub comment {
    print shift if ($verbose>=1);
}

sub comment2 {
    print "  -".shift if ($verbose>=2);
}

sub dbgmsg {
    return unless $debug;
    my $s=shift;
#    chomp $s;
#    $s =~ s/\n/\n-DEBUG:/g;
    print "+DEBUG:".$s;
}

sub dbgmsg2 {
    return unless $debug2;
    my $s=shift;
    print "+DEBUG2:".$s;
}

# The real issue here that makes transitmount a bit complex is that a
# device may be mounted under a particular name, but available through
# other names (root can always use mknod to make a device node, with
# arbitrary names, major and minor numbers).

# And before mounting a filesystem, we want it to be checked for
# sanity, so we will fsck it. And we mustn't fsck a device that is
# already mounted. So we want to make certain that a device is not
# already mounted.

# Before devfs, the Right Thing to do was to compare them by
# type/major number/minor number. For example, this is, according to
# Richard Gooch in devfs doc, what the program "find" does to see if
# entering a directory changes the file system. I'm not sure this will
# work forever.

# Now things are a bit different. In a devfs setup, the real, proper
# way to uniquely identify a device is through its canonical name in
# the devfs namespace (the kernel decides for this, so it will always
# be consistent with what we see in /proc/partitions). If a device has
# aliases in /dev, either created by the kernel of devfsd, they are
# all relative symlinks to the real device name.

# Things get a bit more complicated because of compatibility. We want
# transitmount to work in traditional, devfs-unaware systems, and in
# mixed systems where some absolute symlinks exist for old style
# devices. Mandrake 8.1 is an example, where fstab is old-style, to
# still allow booting with devfs=nomount or devfs-unaware kernels.

# The choice here is to follow symlinks until we find a real
# device. Then, it is supposed to be the canonical device name. It is
# 100% safe in 100% devfs setups.

# All sane traditional setups will work. Still, you can break it by
# purposedly creating a special block device with a non-standard name
# (i.e. not the name the kernel knowns about, mentioned in
# /proc/partitions), mounting the filesystem under this strange name,
# then run transitmount. Both transitmount and fsck will fail to
# notice that the filesystem is already mounted. 

# This may happen if you untarred the content of an old /dev with
# non-standard names into the devfs, for example.  Perhaps we should
# cope with this, after all. Even umount (2.11h) and fsck (1.24a)
# don't try that hard to be smart.

# It seems that the ultimate check (for a future version maybe) is to
# note down the major and minor number along with the device names.
# then, a double check can be performed and, I think, will always be
# correct.




# Variable usage:

# can = "canonical" means, in devfs namespace (or relative to /dev) :
# - "hda1, etc..." in traditional style,
# - "ide/host0/bus1/target1/lun0/cd, etc..." in devfs style
# abs = "absolute" means: a device name with /dev/ prepended.

# @candidates = partitions known to the kernel (can)
# %devices = hash, keys are devices (all devices found) (can), values are strings indicating files where they appear
# %whereknown = hash, keys are absolute device names or mount points, values are strings indicating files where they appear


# First: get a list of candidates partitions known to the system.

dbgmsg "*** Looking for candidates partitions.\n";
{

# What we read in /proc/partitions are supposed to be canonical names,
# because they are expressed by the kernel.

    $file="/proc/partitions";
    if ($simulate==1) { 
	$file="proc-partitions"; 
	print "simulation run: will read $file.\n";
    }

    open(PARTITIONS, $file) || die "can't open $file: $!";
    
# First line gives us the column where the device names start.
    $column=index <PARTITIONS>, "name";
    dbgmsg "Found that device names start at column $column in $file.\n";
    while (<PARTITIONS>) {
	chomp;
	next if (length ($_) < $column);
	$dev=substr $_, $column or next;
	#select the part that looks like a device. This method works
	#both with devfs and traditional style.
	if ($dev =~ s/([-_a-zA-Z0-9\/]+).*/$1/) {
	    push @candidates, $dev;
	    $devices{$dev} .= $file." ";
	    dbgmsg2 "DEV=$dev\n";
	}
    }
    close PARTITIONS;
}

dbgmsg "*** Candidates partitions detected:\n".(join "\n",@candidates)."\n";


# Next, we'll have to eliminate some of those entries (already mounted, etc...).


# For this purpose, we need to analyse some other files.

sub parse_mnt_ent {
    my $file = shift;
    if ($simulate==1) { 
	print "simulation run: will read $file.\n";
    }
    dbgmsg2 "*** Analysing $file.\n";
    open (FILE, $file) || die "can't open $file: $!";
    while (<FILE>) {
	chomp;
	if (m|^/dev/([-_A-Za-z/0-9]+)\s+(\S+)\s.*|) {
	    if ($debug2) { dbgmsg2 "DEV=$1\tFILE=$2, 3=$3, 4=$4, 5=$5\n"; }
	    my $thisdev=$1;
	    my $thismountpoint=$2;
	    if (($file =~ /mounts/) && ($thisdev =~ /^root$/)) {
		comment "Skipping pseudo-entry /dev/root in $file.\n";
		next;
	    }
	    $devices{$thisdev} .= $file." ";
	    $whereknown{"/dev/".$thisdev} = $file." ";
# $thismountpoint, the directory name, is noticed as a used mount point
#	    $mountpointfordevice{$thisdev} = $thismountpoint;
	    $deviceformountpoint{$thismountpoint} = $thisdev;
	} else {
	    dbgmsg2 ("Ignored line $_\n");
	}
    }
    close FILE;
}

if ($simulate == 1) {
    print "simulation run.\n";
    parse_mnt_ent("proc-mounts");
    parse_mnt_ent("etc-mtab");
    parse_mnt_ent("etc-fstab");
} else {
    parse_mnt_ent("/proc/mounts");
    parse_mnt_ent("/etc/mtab");
    parse_mnt_ent("/etc/fstab");
}

# Up to now, we didn't need to know about devfs.

# Actually, we don't need to explicitely deal with it.
# The only thing that is important is to reliably find if a device is mounted.
# We assume here that if devfs is present, it is mounted under /dev
# (though we could check that through /proc/mounts).
# It is sufficient to follow symlinks in /dev.

dbgmsg "*** All devices found:\n";
foreach $_ (sort keys %devices) {
#    $realdevice{$_}="/dev/".$_;
    dbgmsg "$_ \tfound in ".($devices{$_})."\n";
}

dbgmsg2 "*** Already handled devices :\n";
foreach $onenameofit (sort keys %whereknown) {
    $canonicalnameofit=canonicalizedevicename($onenameofit);
    if ($canonicalnameofit eq $onenameofit) {
	dbgmsg2 "$onenameofit \tbecause of ".($whereknown{$onenameofit})."\n";
    } else {
	$whereknown{$canonicalnameofit} .= "(see $onenameofit)";
	dbgmsg2 "$onenameofit\t(same as $canonicalnameofit) because of ".($whereknown{$onenameofit})."\n";
    }
}

comment2 "*** Devices transitmount won't touch :\n";
foreach $onenameofit (sort keys %devices) {
    if ($whereknown{"/dev/".$onenameofit}) {
	comment2 "Ignoring $onenameofit\t(handled in ".($whereknown{"/dev/".$onenameofit}).")\n";
    }
    $canonicalnameofit=canonicalizedevicename($onenameofit);
    if ($whereknown{"/dev/".$canonicalnameofit}) {
	comment2 "Ignoring $onenameofit (just another name for $canonicalnameofit)\t(handled in ".($whereknown{"/dev/".$canonicalnameofit}).").\n";
    }

    if (!($whereknown{"/dev/".$onenameofit})) {
	push @handle, $onenameofit;
	comment2 "We keep $onenameofit\n";
    }
}
comment2 "\n";

comment "*Found ".(@handle)." potential device(s) to mount.\n";
foreach $_ (sort @handle) {
    comment "$_\n";
}

# things continue after the canonicalizedevicename() definition



#dbgmsg "Canonicalizing names (Checking for symlinked devices).\n";

# Take a device name, absolute or relative to /dev, and return the
# canonical device name, starting with /dev.

sub canonicalizedevicename {
    my $givenname=shift;
#    dbgmsg2 "Canonicalizing $givenname.\n";
    my $rawname=$givenname;
    my $symlinklevel=shift;
# $pwd must start with "/", and end without "/"
    my $pwd="/dev";
    undef @canname;
    
    #so that join puts a heading /
    push @canname, "";
    
# If the raw name doesn't start with "/", we prepend our current
# working dir.
    if (!($rawname =~ /^\//)) {
	$rawname=$pwd."/".$rawname;
    }
    
# We are going to "unknit" the possible symlink levels, as open()
# and bash's "cd -P" do
    @rawslices=split "/", $rawname;

    shift @rawslices; # because of the first "/"

    while ($pathpart = shift @rawslices) {
#	print "canname=".join ("/",@canname)." pp=$pathpart, rawslices=".join ("/", @rawslices)."\n";

	if ($pathpart eq "..") {
	    pop @canname;
	    next;
	}

	#dbgmsg2 "extracting $pathpart\n";
	$trycanname=join ("/",@canname)."/".$pathpart;
	
	#dbgmsg2 "$trycanname\n";
	if (!lstat $trycanname) { 
	    print STDERR "Warning: while canonicalizing '$givenname', stat()ing $trycanname: $!\n"; 
	    return 0; 
	}
	if (-l _) {
	    # We hit a symlink. Is it absolute or relative ?
	    $sl=readlink($trycanname);
	    #dbgmsg "following symlink: $trycanname -> $sl\n";
	    if ($symlinklevel++ > 10) {
		print "... hum, many symlinks levels. Giving up. You should check your setup, especially '$trycanname'.\n";
		exit 1;
	    }
	    if ($sl =~ /^\//) {
		#absolute. We have to start over.
		return canonicalizedevicename($sl.join ("/", @rawslices), $symlinklevel);
	    } else {
		# transform foo/./bar into foo/bar
		$sl =~ s|/./|/|g;
		unshift @rawslices, (split /\//, $sl);
		# ready to add the next part of the name
	    }
	} else {
	    push @canname, $pathpart;
	}
    } # for
#    print "$givenname =>=> ".(join "/", @canname)."\n";
    return join "/", @canname;
}




# Make sure that $transitmount_root exists, and clean it a bit.
# This can be done anytime after mounts and mtab are analysed.

if (!(-d $transitmount_root)) {
    comment "Creating $transitmount_root, where transitting partitions will be mounted.\n";
    mkdir $transitmount_root;
}


# Next, we'll tidy the directory a bit, in case some old mountpoints remain.

print "*Removing old mountpoints in $transitmount_root.\n" if ($verbose);

opendir(DIR, $transitmount_root) || die "can't opendir $transitmount_root: $!";
while ($_=readdir(DIR)) {
    next if /\./;
    next if /\.\./;
    if ($adevice=$deviceformountpoint{($transitmount_root.$_)}) {
	comment "Won't remove old mount point ".$transitmount_root.$_.": is already the mount point for device ".$adevice.".\n";
	next;
    }
    comment "Removing old mount point ".$transitmount_root.$_."\n";
    rmdir $transitmount_root.$_
	or warn "Could not remove ".$transitmount_root.$_.": $?";
}
closedir DIR;



$mounttried=0;
$mountfailed=0;

# Ok, we have all we need to proceed.

#print "Current number of mounted partitions: ".@devices_mounts."\n" if ($debug);

foreach $shortdevice (@handle) {
    chomp $shortdevice;
    $device="/dev/".$shortdevice;
    comment "*Considering '$shortdevice' \n";
    #Par défaut:
    $name=$shortdevice;
    $relativemountpoint=$shortdevice;
    $relativemountpoint=~ s/\//_/g; #this is to "flatten" (no slash) devfs-style device names

#    my $localstring;
#    if ($localstring=ismounted($device)) {
#	print "  Ignoring $device: already taken care of by $localstring\n" if ($verbose);
#	next;
#    }

#    print "let's identify $device.\n";
    $identify=`file -s $device`;
#    print "done identifying $device.\n";

    #next if ( $identify =~ /extended partition/);

    if (!($filesystemtype=isfilesystem($identify))) {
	print "  No known filesystem in $identify" if ($verbose);
	next;
    }

    print $identify if ($debug);

    comment "  holds filesystem identified as: ".$filesystemtype."\n";

    my @mount_options=@{$fstype_to_options{$filesystemtype}};

    if ($identify =~/ext. filesystem/) {

	# Ok, let's extract volume label
	print "Reading ".$filesystemtype." volume label on $device\n" if ($debug);
	@wouldbelabel=readpipe "e2label $device"; #Does this call the shell, or a exec ? man perlfunc says "EXPR is executed as a system command", and if no metacharacter is present, an exec is done, without any shell...
	
	$alabel=pop @wouldbelabel;
	chomp $alabel;
	if (pop @wouldbelabel) {
	    warn "Multi-line label for device $device ?? Label ignored!\n"
	    } else {
		if ($alabel) {
		    $name=$alabel;
		    $relativemountpoint=$alabel;
		    printf "  has an ".$filesystemtype."fs volume name : ".$name."\n" if ($verbose);
		} else {
		    printf "  has an empty ".$filesystemtype."fs volume label ? : ".$alabel."\n" if ($verbose);
		}
	    }
	print "  Let's fsck.".$filesystemtype." $device, to be sure...\n";

	@args = ("fsck.".$filesystemtype, "-p", "-C", "0", $device);
	$fsckrc=system(@args);
	if (($fsckrc >= 4*256) || ($fsckrc & 255)) {
	    warn "   Hum, the filesystem is possibly not clean...: $?\n   We'll mount it anyway, but maybe we shouldn't...";
	}
    } else {
	# If file type is ext2, we may look for a soft label anyway. For now, we don't.
	print "Pre-mounting $device read-only to check for a \"soft\" volume label.\n" if ($debug);
	
	mkdir $tempmountpoint;
	
	@args = ("mount", $device, $tempmountpoint);
	
	if (@mount_options) {
#	printf "There are mount options for this filesystem : @{@mount_options}\n";
	    
	    push @args, @mount_options;
	    push @args, "-o";
	    push @args, "ro";
	}
	
	print "Full pre-mount args: '".join (" ",@args)."'\n" if $debug2;
	
	if (system(@args) == 0) {
#Ok, it is mounted. we'll look for a 'soft label' in the file
	    
	    if (!open(SOFTLABELFILE, $softlabel_fullname)) { 
		print("   Can't open inside $device a soft label file named '$softlabel_filename'\n") if ($verbose);
	    } else {
		print "Opened $softlabel_fullname..." if $debug2;
		@wouldbelabel=<SOFTLABELFILE>;		
		$alabel=pop @wouldbelabel;
		chomp $alabel;
		if (pop @wouldbelabel) {
		    warn "Multi-line soft label for device $device ?? Label ignored!\n"
		    } else {
			if ($alabel) {
			    $name=$alabel;
			    $relativemountpoint=$alabel;
			    printf "  ".$device." has a soft volume name : ".$name."\n" if ($verbose);
			} else {
			    printf "  ".$device." has an empty soft volume label ? : ".$alabel."\n" if ($verbose);
			}
		    }
		# Don't forget to close the file ! Or we won't be able to umount !
		close(SOFTLABELFILE);
	    }
	    
	    print "Un-mounting the read-only pre-mounted $device.\n" if ($debug);	
	    @args = ("umount", $tempmountpoint);
	    
	    if (system(@args) != 0) {
		warn("couldn't un-mount the read-only pre-mounted $device : $?");
	    }
	    
	} else {
	    warn "system @args failed: $?\nwon't be able to find a soft label for $device";
	}
	print "Removing pre-mount point ".$tempmountpoint."\n" if ($debug);
	rmdir $tempmountpoint
	    or warn "Could not remove ".$tempmountpoint.": $?";
    }


    print "Before cleanup/check: ".$shortdevice.":\n\tName: ".$name."\n\tMount point: ".$relativemountpoint."\n" if ($debug2);
    if (! $name ) {
	$name=$shortdevice;
	$relativemountpoint=$shortdevice;
	$relativemountpoint=~ s/\//_/g; #this is to flatten devfs-style device names
    }

    print $shortdevice.":\n\tName: ".$name."\n\tMount point: ".$relativemountpoint."\n" if ($debug);

    $absolutemountpoint=$transitmount_root.$relativemountpoint;

    print " Mounting $device on $absolutemountpoint\n";

    mkdir $absolutemountpoint;

    @args = ("mount", $device, $absolutemountpoint);

    if (@mount_options) {
#	printf "There are mount options for this filesystem : @{@mount_options}\n";

	push @args, @mount_options;
    }

    print "Full mount args: '".join (" ",@args)."'\n" if $debug2;

    $mounttried++;

    if (system(@args) != 0) {
	warn "system @args failed: $?";
	$mountfailed++;
	print "Removing mount point ".$absolutemountpoint."\n";
	rmdir $absolutemountpoint
	    or warn "Could not remove ".$absolutemountpoint.": $?";
    }
}

sub isfilesystem {
    $_=shift;
    return "x86" if /x86/;
    return "ext2" if /ext2 filesystem/;
    return "ext3" if /ext3 filesystem/;
    return "minix" if /Minix filesystem/;
    #return "fat" if /FAT/;
    
# TODO: if the first 32768 bytes are all zeroes, then it is an ISO image ?

#    return "auto" unless /empty/;

#    # alternate way of guessing
#    if (/[,:] .* filesystem/) {
#	$guess=$_ ; 
#	$guess =~ s/^.*[,:] (.* filesystem).*$/$1/ ;
#	return $guess;
#    };

    return "other" if /filesystem/;
    return 0;
}

print "*Mounted $mounttried device(s).\n";
if ($mounttried>0) { print" See in $transitmount_root. "; }
if ($mountfailed) { print "$mountfailed failed.\n"; }
print "End of transitmount.\n";
exit 0;

